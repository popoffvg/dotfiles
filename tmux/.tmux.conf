
# set-option -g prefix C-w
set -g prefix None
bind -n m-w set status on \; switchc -Tprefix
bind w set status off \; choose-tree -Zw
bind [ set status off \; copy-mode
bind j set status off
set-environment -g PATH "/opt/homebrew/bin:/usr/local/bin:/bin:/usr/bin"

set -g mouse on
set -g set-clipboard external

setw -g mode-keys vi

# separator colours
# set-window-option -g pane-border-status off
# set -g pane-active-border-style "fg=default bg=default"
# set -g pane-border-style "fg=default bg=default"
# set -g pane-border-lines simple
# set -g pane-border-style fg=white

# pane on top
set-option -g status-position top
set-option -g focus-events on
set-option -g default-terminal "screen-256color"
set-option -sg escape-time 10
# These bindings are for X Windows only. If you're using a different
# window system you have to replace the `xsel` commands with something
# else. See https://github.com/tmux/tmux/wiki/Clipboard#available-tools
bind -T copy-mode    DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
bind -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
bind -n DoubleClick1Pane select-pane \; copy-mode -M \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
bind -T copy-mode    TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
bind -T copy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
bind -n TripleClick1Pane select-pane \; copy-mode -M \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
bind -n MouseDown2Pane run "tmux set-buffer -b primary_selection \"$(xsel -o)\"; tmux paste-buffer -b primary_selection; tmux delete-buffer -b primary_selection"
bind C-c run "tmux save-buffer - | xclip -i -sel clipboard >/dev/null"
# turn off tmux mouse handler in nvim
set -g @emulate-scroll-for-no-mouse-alternate-buffer "off"

# For vi copy mode bindings
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -selection clipboard -i"
# For emacs copy mode bindings
bind-key -T copy-mode MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -selection clipboard -i"

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'khanghh/tmux-dark-plus-theme'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'MaximilianGaedig/tmux-filter'
# set -g @plugin 'ofirgall/tmux-window-name'
# bind -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

set -g @plugin 'nhdaly/tmux-better-mouse-mode'
set -g @plugin 'Morantron/tmux-fingers'
set -g @fingers-key P

set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'roosta/tmux-fuzzback'
set -g @plugin 'catppuccin/tmux'

set -g @plugin 'ofirgall/tmux-window-name'
set -g @plugin 'joshmedeski/tmux-nerd-font-window-name'

bind-key -T copy-mode-vi v send-keys -X begin-selection
# set-option -s set-clipboard off
set -g @yank_action 'copy-pipe-no-clear'

set -g status off
# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?|fzf)(diff)?$'"
bind-key -n 'C-h' set status off \; if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' set status off \; if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' set status off \; if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' set status off \; if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'


bind-key -n 'm-h' resize-pane -L 10
bind-key -n 'm-j' resize-pane -D 10
bind-key -n 'm-k' resize-pane -U 10
bind-key -n 'm-l' resize-pane -R 10

# bind-key -n 'C-p' send-keys 'Right'\; if-shell "$is_vim" 'send-keys C-p'
# bind-key -n 'C-n' send-keys 'Left'\; if-shell "$is_vim" 'send-keys C-n'
bind-key + split-window -v -c "#{pane_current _path}"\; resize-pane -D 40

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

# choose only window
bind-key -r -T prefix m run-shell 'tmux choose-tree -Nwf"##{==:##{session_name},#{session_name}}"'
bind-key -r -T prefix s choose-session
# bind-key -T copy-mode-vi 'C-h' select-pane -L
# bind-key -T copy-mode-vi 'C-j' select-pane -D
# bind-key -T copy-mode-vi 'C-k' select-pane -U
# bind-key -T copy-mode-vi 'C-l' select-pane -R
# bind-key -T copy-mode-vi 'C-\' select-pane -l
#You would have to adapt here by changing ">" to ">="
#and maybe changing the key binding by what you
#already have if what you have indeed worked after
#checking the points I gave you earlier.
if-shell -b '[ "$(echo "$TMUX_VERSION > 2.5" | bc)" = 1 ]' " \
  bind-key -T copy-mode-vi 'v' send -X begin-selection; \
  bind-key -T copy-mode-vi 'r' send -X rectangle-toggle; \
  bind-key -T copy-mode-vi 'y' send -X copy-pipe-and-cancel 'xclip -selection clipboard -in'"

bind \\ split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"; resize-pane -D 20
unbind '"'
unbind %
bind c new-window -c "#{pane_current_path}"

# # windows navigation
# bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
# bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
# bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
# bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"

# window autoname
set-option -g status-interval 5
set-option -g automatic-rename on
# set-option -g automatic-rename-format '#{b:pane_current_command}:#{b:pane_current_path}'
set-option -g default-command "reattach-to-user-namespace -l zsh"

set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_status_icon_enable "yes"
set -g @catppuccin_window_default_text "#W"
set -g @catppuccin_window_current_text "#W"
set -g @catppuccin_status_modules_right "session date_time"
set -g @catppuccin_status_modules_left ""
set -g @catppuccin_flavour "cyberdream"

run '~/.tmux/plugins/tpm/tpm'

# refresh keymap
unbind r
bind r source-file ~/.tmux.conf
