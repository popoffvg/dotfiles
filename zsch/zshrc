export PATH=$PATH:/opt/homebrew/bin

if [ -z "$TMUX" ]
then
    tmux attach -t TMUX || tmux new -s TMUX > /dev/null
fi

eval "$(zoxide init zsh)"
eval "$(oh-my-posh init zsh)"
eval "$(oh-my-posh init zsh --config $(brew --prefix oh-my-posh)/themes/catppuccin.omp.json)"
eval "$(direnv hook $SHELL)"
eval "$(zoxide init zsh)"
eval "$(atuin init zsh)"
eval $(thefuck --alias)

alias zshconfig="mate ~/.zshrc"
alias ..="z .."
alias ...="z ../.."
alias ....="z ../../.."
alias .....="z ../../../.."
alias ls='exa'
alias vi=nvim
alias c=clear
alias k=kubectl
alias go="grc go"
alias gita="git add . && git commit --amend -C HEAD && git push -f"
alias ff="fuck"
alias fy="fuck -y"

ZVM_VI_ESCAPE_BINDKEY=qq

export ZPLUG_HOME=$(brew --prefix)/opt/zplug
source $ZPLUG_HOME/init.zsh

zplug "IngoMeyer441/zsh-easy-motion"

source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
export ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR=/opt/homebrew/share/zsh-syntax-highlighting/highlighters

plugins=(
    fzf-tab
    git
    colorize
    zsh-autosuggestions
    cp
    zsh-syntax-highlighting
    mvn
    docker
    docker-compose
    fzf
    kubectl
    golang
    tmux
)

config="/Users/popoffvg/Documents/git/dotfiles/zsch/zshrc"
if [ -f "$config" ]; then
    source $config
else
    print "404 load config: $config not found."
fi


# completion
[ ! -f ~/.oh-my-zsh/fzf-tab/fzf-tab.plugin.zsh ] || source ~/.oh-my-zsh/fzf-tab/fzf-tab.plugin.zsh

# only for git
zstyle ':completion:*:*:git:*' fzf-search-display true
# or for everything
zstyle ':completion:*' fzf-search-display true

zstyle :compinstall filename "${ZDOTDIR:-$HOME}/.zshrc"

autoload -Uz compinit
compinit

# direnv


export GOPATH=~/go
export PATH=$PATH:$GOPATH/bin
export PATH=$PATH:~/.local/bin

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# The next line updates PATH for Yandex Cloud CLI.
if [ -f '/Users/popoffvg/yandex-cloud/path.bash.inc' ]; then source '/Users/popoffvg/yandex-cloud/path.bash.inc'; fi

# The next line enables shell command completion for yc.
if [ -f '/Users/popoffvg/yandex-cloud/completion.zsh.inc' ]; then source '/Users/popoffvg/yandex-cloud/completion.zsh.inc'; fi

[[ -s "/Users/popoffvg/.gvm/scripts/gvm" ]] && source "/Users/popoffvg/.gvm/scripts/gvm"
eval "$(~/.local/bin/mise activate zsh)"

export MISE_SHELL=zsh
export __MISE_ORIG_PATH="$PATH"

mise() {
  local command
  command="${1:-}"
  if [ "$#" = 0 ]; then
    command /opt/homebrew/bin/mise
    return
  fi
  shift

  case "$command" in
  deactivate|s|shell)
    # if argv doesn't contains -h,--help
    if [[ ! " $@ " =~ " --help " ]] && [[ ! " $@ " =~ " -h " ]]; then
      eval "$(command /opt/homebrew/bin/mise "$command" "$@")"
      return $?
    fi
    ;;
  esac
  command /opt/homebrew/bin/mise "$command" "$@"
}

_mise_hook() {
  eval "$(/opt/homebrew/bin/mise hook-env -s zsh)";
}
typeset -ag precmd_functions;
if [[ -z "${precmd_functions[(r)_mise_hook]+1}" ]]; then
  precmd_functions=( _mise_hook ${precmd_functions[@]} )
fi
typeset -ag chpwd_functions;
if [[ -z "${chpwd_functions[(r)_mise_hook]+1}" ]]; then
  chpwd_functions=( _mise_hook ${chpwd_functions[@]} )
fi

if [ -z "${_mise_cmd_not_found:-}" ]; then
    _mise_cmd_not_found=1
    [ -n "$(declare -f command_not_found_handler)" ] && eval "${$(declare -f command_not_found_handler)/command_not_found_handler/_command_not_found_handler}"

    function command_not_found_handler() {
        if /opt/homebrew/bin/mise hook-not-found -s zsh -- "$1"; then
          _mise_hook
          "$@"
        elif [ -n "$(declare -f _command_not_found_handler)" ]; then
            _command_not_found_handler "$@"
        else
            echo "zsh: command not found: $1" >&2
            return 127
        fi
    }
fi

